from flask import Flask, request, jsonify, abort, request
from app import app
from app.models.malware_data import MalwareData
from app import app, db
from app.schemas.malware_data import malware_data_schema, malware_full_data_schema

@app.route('/')
def index():
    return 'Welcome to Malware Checker'
    
    
@app.route('/urlinfo/1/<path:hostname_port>/', defaults={'urlpath': ''}, methods=['GET'])
@app.route('/urlinfo/1/<path:hostname_port>/<path:urlpath>', methods=['GET'])
def url_checker(hostname_port, urlpath):
    domain_and_port = hostname_port
    
    #Values parsed already by Werkzeug, so no need to use urlparse
    query_string    = request.query_string

    #Need to validate if port is present before splitting
    if ':' in domain_and_port:
        urlparts = domain_and_port.split(':')
        hostname = urlparts[0]
        port     = urlparts[1]
    else:
        hostname = domain_and_port
        #Since port 80 is the default http port, we set is as the default
        port     = None
    try:
        if query_string and port:
            path_query_string = urlpath + '?' + query_string
            url_data = MalwareData.query.filter_by(domain=hostname, port=port, query_string=path_query_string).one_or_none()
        elif query_string and not port:
            path_query_string = urlpath + '?' + query_string
            url_data = MalwareData.query.filter_by(domain=hostname, query_string=path_query_string).one_or_none()
            if url_data is None:
                port = 80
                url_data = MalwareData.query.filter_by(domain=hostname, port=port, query_string=path_query_string).one_or_none()
        elif hostname and not port and not query_string:
                port = 80
                url_data = MalwareData.query.filter_by(domain=hostname, port=port).one_or_none()
        else:
            url_data = MalwareData.query.filter_by(domain=hostname, port=port).one_or_none()
    except Exception as e:
        return e
    true_list = ['True', 'true', 1]
    
    if url_data is None:
        res = {
            'status': 204,
            'message': 'Data not present in our database',
            'domain': hostname,
            'port': port,
        }
    elif url_data.is_malicious in true_list:
        res = {
            'status': 200,
            'message': 'Harmful Url. Not recommended to visit',
            'url_type': url_data.category,
            'domain': url_data.domain,
            'port': url_data.port,
            'is_malicious': url_data.is_malicious,
        }
    else:
        message = 'Url is safe to browse.'
        status_code = 204
        res = {
            'status': status_code,
            'message': message,
            'domain': url_data.domain,
            'port': url_data.port,
            'is_malicious': url_data.is_malicious,
        }
    return jsonify(res)


@app.route('/urlinfo/1/', methods=['GET'])
def url_list():
    try:
         url_data = MalwareData.query.all()
    except Exception as e:
         return e
    else:
        result = malware_full_data_schema.dump(url_data)
        return jsonify(result.data)