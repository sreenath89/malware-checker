import os
import unittest
from app import app, db
import json

##Only sample username and password has been given. They need to be replaced with an account having proper privileges
MYSQL_DATABASE_URI = 'mysql+pymysql://mlwrUser:mlwr768@127.0.0.1:3306/malware_checker_test?charset=utf8'

class BasicTests(unittest.TestCase):
    #Test Fixtures - setUp and tearDown
    #Executed before each test
    def setUp(self):
        app.config['TESTING'] = True
        app.config['DEBUG'] = True

        #Passing details of Test DB
        app.config['SQLALCHEMY_DATABASE_URI'] = MYSQL_DATABASE_URI
        self.app = app.test_client()
        db.drop_all()
        db.create_all()
        
    #Will be executed after each test
    def tearDown(self):
        pass

    ####Test Section
    def test_main_page(self):
        response = self.app.get('/', follow_redirects=True)
        self.assertEqual(response.status_code, 200)
        
    def test_main_page_content(self):
        response = self.app.get('/', follow_redirects = True)
        self.assertIn('Welcome to Malware Checker', response.data)

    def test_urlinfo_page(self):
        response = self.app.get('/urlinfo', follow_redirects=True)
        self.assertEqual(response.status_code, 404)

    def test_urlinfo_list_all(self):
        response = self.app.get('/urlinfo/1', follow_redirects=True)
        self.assertEqual(response.status_code, 200)

    def test_malicious_url_reponse(self):
        content = 'google.com'
        response = self.app.get('urlinfo/1/' + content, follow_redirects = True)
        self.assertEqual(response.status_code, 200)

    def test_malicious_url_content(self):
        expected_output = {"domain": "google.com", "message": "Data not present in our database", "port": 80, "status": 204}
        content = 'google.com'
        response = self.app.get('urlinfo/1/' + content, follow_redirects = True)
        response_json = json.loads(response.data.decode('utf-8'))
        self.assertEqual(expected_output, response_json)
        self.assertEqual(response_json.get('status'), 204)
 
if __name__ == "__main__":
    unittest.main()
